---
# include config for Ninjablock
- name: include config for Ninjablock
  include_vars: ninja-conf.yml

# remove (if present) packages to mirror Ninjablock setup scripts
- name: remove packages unwanted by Ninjablock
  apt: name={{item}} state=absent force=yes purge=yes
  with_items: "{{ pkgs_to_remove }}"

# ensure packages required by Ninjablock are present and current
- name: install or update packages required by Ninjablock
  apt: name={{item}} state=latest
  with_items: "{{ pkgs_required }}"

# packages for which it seems questionable that they are truly needed
- name: install or update packages believed to be needed by Ninjablock
  apt: name={{item}} state=latest
  with_items: "{{ pkgs_other }}"

# install alternatives symlink for code expecting /usr/bin/node
- name: install alternative for node
  alternatives: name=node path=/usr/bin/nodejs link=/usr/bin/node

# packages that are built and installed from source
- name: download mjpg-streamer
  subversion: repo=http://svn.code.sf.net/p/mjpg-streamer/code/ dest=/tmp/mjpg-streamer revision=HEAD force=yes
- name: build and install mjpg-streamer
  shell: make && install --mode=755 mjpg_streamer /usr/local/bin && install --mode=644 output_http.so /usr/local/lib
  args:
    chdir: /tmp/mjpg-streamer/mjpg-streamer
    creates: /usr/local/bin/mjpg_streamer

# ruby gems that are required
- name: install required ruby gems
  gem: name={{item}} user_install=no state=latest
  with_items: "{{ gems_required }}"

# Create directories for Ninjablock utilities and client
- name: create directories for Ninjablock utilities and client
  file: path={{item}} owner=ubuntu group=ubuntu mode=0755 state=directory
  with_items:
    - "{{ ninja.utildir }}"
    - "{{ ninja.clientdir }}"
    - "{{ ninja.etcdir }}"

# Ninjablocks Utilities
- name: download Ninjablock utilities
  git:
    repo: "{{ ninja.utilrepo }}"
    version: "{{ ninja.utilversion }}"
    dest: "{{ ninja.utildir }}"
  become: false

# Ninjablocks Client
- name: download Ninjablock client
  git:
    repo: "{{ ninja.clientrepo }}"
    version: "{{ ninja.clientversion }}"
    dest: "{{ ninja.clientdir }}"
  become: false

# Additional Ninjablocks drivers for the client
- name: download Ninjablock client drivers
  git:
    repo: "{{ item.repo }}"
    version: "{{ item.version }}"
    dest: "{{ ninja.clientdir }}/drivers/{{ item.name }}"
  become: false
  with_items: "{{ ninja.extdrivers }}"

# install node modules for Ninjablock nodejs packages
- name: install node modules for Ninjablock client
  npm: path={{item}}
  with_items:
    - "{{ ninja.clientdir }}"
    - "{{ ninja.utildir }}"
    - "{{ ninja.utildir }}/wifi"
  become: false

# identify all drivers for which we need to run npm install
- name: find Ninjablock client drivers
  shell: ls | grep -v common chdir={{ ninja.clientdir }}/drivers
  register: ninja_client_drivers

# install node modules for Ninjablock drivers
- name: install node modules for Ninjablock drivers
  npm: path={{ ninja.clientdir }}/drivers/{{ item }}
  with_items: "{{ ninja_client_drivers.stdout_lines }}"
  become: false

# add Ninjablock utilities to root and ubuntu users' paths
- name: ensure Ninjablock utilities are in PATH
  lineinfile: dest={{item}} insertafter=EOF line='export PATH=$PATH:{{ ninja.utildir }}/bin' state=present
  with_items:
    - /root/.bashrc
    - /home/ubuntu/.bashrc

# Some of the Ninjablock software has wlan0 hardcoded for wireless, so
# ensure that network adaptors will use it.
- name: comment out network adaptor persistence rules for fixed addresses
  replace:
    dest: /etc/udev/rules.d/70-persistent-net.rules
    regexp: '^(SUBSYSTEM.+ATTR{address}=="[a-f0-9:]+".+KERNEL=="wlan\*".+)$'
    replace: '# \1'

# initialize ninjablock log files so they have the right permissions
- name: determine whether Ninjablock log files exist
  stat: path={{ ninja.log }}
  register: log_exists
  ignore_errors: True

- name: initialize Ninjablock logfile
  file: path={{ item }} owner=ubuntu group=ubuntu mode=0644 state=touch
  with_items:
    - "{{ ninja.log }}"
    - "{{ ninja.zigbee_log }}"
  when: log_exists.stat.exists == False

# Initialize hardware environment settings. These will be run as well
# during system boot or ninjablock client service start, so strictly
# speaking we don't need to run them here. However, running them here
# allows us to notice failures before going any further, as opposed to
# seeing them only at runtime.
- name: initialize Ninjablock hardware environment settings
  command: "{{ ninja.utildir }}/bin/{{ item.cmd }} creates={{ item.creates }}"
  with_items:
    - { cmd: 'detect-hw-os', creates: '/etc/environment.local' }
    - { cmd: 'setgpio', creates: '/sys/class/gpio/gpio[0-9]*/value' }
    - { cmd: 'serialnumber', creates: '{{ ninja.etcdir }}/serial.conf' }

# install Ninjablock files to system directories
- name: install Ninjablock system configuration files
  shell: install --mode {{item.mode}} {{ninja.utildir}}/{{item.path}} /{{item.path}}
  with_items:
    - { path: 'etc/logrotate.d/ninjablock', mode: '0755' } 
    - { path: 'etc/update-motd.d/99-footer', mode: '0755' }
    - { path: 'etc/update-motd.d/10-help-text', mode: '0755' }

# remove default password statements from login prompt dialogs
- name: remove default username:password from login prompt
  lineinfile: dest={{ item }} regexp="^default username:password.*" state=absent
  with_items:
    - /etc/issue
    - /etc/issue.net

# Create a series of markers to prevent the crude update scripts that
# are part of the Ninjablocks utilities suite from running.
- name: create Ninjablocks update markers
  file: path={{ ninja.etcdir }}/{{ item }} owner=ubuntu group=ubuntu mode=0644 state=touch
  with_items: "{{ ninja.markerfiles }}"

# As the last step, install the Ninjablock startup files. We're excluding
# the wifi app for now because the interface configuration it does needs
# fixing.
- name: install Ninjablock system startup files
  shell: install --mode 0644 {{ninja.utildir}}/{{item}} /etc/{{item}}
  with_items: "{{ ninja.startupfiles }}"

# this should be it; reboot and wait for that to complete successfully
- name: reboot
  command: reboot
  async: 5
  poll: 0
  ignore_errors: True
- name: wait for reboot to complete
  local_action: wait_for port=22 host={{ inventory_hostname }}
  become: false

